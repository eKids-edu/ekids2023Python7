from datetime import datetime
import json
from telebot import TeleBot
from telebot.types import BotCommand, ReplyKeyboardMarkup, KeyboardButton
from settings import BOT_TOKEN


HELLO_WORDS = ["–≤—ñ—Ç–∞—é", "–ø—Ä–∏–≤—ñ—Ç", "hi", "hello", "bonjour"]
GOODS_KEYS = ("–ù–∞–∑–≤–∞", "–¶—ñ–Ω–∞", "–û–ø–∏—Å", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å")
PRIMARY_KEY = "–ù–∞–∑–≤–∞"
GOODS_FILE_NAME = "goods.json"
MENU = {
    "print": "–í–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤",
    "report": "–ó–≤—ñ—Ç –ø–æ —Å–∫–ª–∞–¥—É",
    "oos": "–ó–≤—ñ—Ç –ø–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º —Ç–æ–≤–∞—Ä–∞–º",
    "help": "–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
}
BUTTONS = ("üõí –¢–æ–≤–∞—Ä–∏", "üìã –ó–≤—ñ—Ç", "‚ùì –î–æ–ø–æ–º–æ–≥–∞", "üìâ –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ —Å–∫–ª–∞–¥—ñ")

bot = TeleBot(BOT_TOKEN)


@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        f"{hello()}, {message.from_user.first_name}!\n\n"
        "–¶–µ–π –±–æ—Ç –≤–º—ñ—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. "
        "–î–æ–¥–∞–≤–∞—Ç–∏, –≤–∏–¥–∞–ª—è—Ç–∏, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, "
        "–∑–º—ñ–Ω—é–≤–∞—Ç–∏ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ, "
        "–∞ —Ç–∞–∫–æ–∂ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ –±–∞–∑–æ–≤—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É.\n\n"
        "–ù–∞–±–µ—Ä—ñ—Ç—å /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        reply_markup=keyboard())


@bot.message_handler(commands=["help"])
def send_help(message):
    bot.send_message(
        message.chat.id,
        "*–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –±–æ—Ç*:\n\n"
        "/add _–Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞, –æ–ø–∏—Å, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_ \- –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä\n"
        "/delete _–Ω–∞–∑–≤–∞\\[, –Ω–∞–∑–≤–∞2, \\.\\.\\.\\]_ \- –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä\\[–∏\\]\n"
        "/price _–Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞_ \- —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É\n"
        "/desc _–Ω–∞–∑–≤–∞, –æ–ø–∏—Å_ \- —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É\n"
        "/stock _–Ω–∞–∑–≤–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_ \- –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –Ω–∞ —Å–∫–ª–∞–¥—ñ\n"
        "/report \- —Å—É–º–∞—Ä–Ω–∏–π –∑–≤—ñ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –Ω–∞ —Å–∫–ª–∞–¥—ñ\n"
        "/oos \- –∑–≤—ñ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º, —â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞ —Å–∫–ª–∞–¥—ñ\n"
        "/print \- –≤–∏–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤",
        reply_markup=keyboard(),
        parse_mode="MarkdownV2")


@bot.message_handler(commands=["add"])
def add_goods(message):
    global goods, GOODS_KEYS
    new_article = parse_command_args(message.text)
    if len(new_article) != len(GOODS_KEYS):
        bot.send_message(message.chat.id,
                         f"‚ùåÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ {len(GOODS_KEYS)}")
        return
    index = find_goods(new_article[0])
    if index != -1:
        bot.send_message(message.chat.id,
                         f"{pretty_view(goods[index])}\n‚ùó–≤–∂–µ —î —É —Å–ø–∏—Å–∫—É")
        return
    new_article[1] = set_price(new_article[1])
    new_article[3] = set_stock(new_article[3])
    if new_article[1] < 0 or new_article[3] < 0:
        bot.send_message(message.chat.id, "‚ùå –•–∏–±–Ω–∞ —Ü—ñ–Ω–∞ –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")
        return
    goods.append(dict(zip(GOODS_KEYS, new_article)))
    save(goods)
    bot.send_message(message.chat.id,
                     f"{pretty_view(goods[-1])}\n‚úÖ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")


@bot.message_handler(commands=["print"])
def print_goods(message):
    global goods
    bot.send_message(message.chat.id, pretty_view(goods))


@bot.message_handler(commands=["delete"])
def delete_goods(message):
    global goods
    names = parse_command_args(message.text)
    if not names:
        bot.send_message(message.chat.id, "‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä")
        return
    for name in names:
        index = find_goods(name)
        if index == -1:
            bot.send_message(message.chat.id,
                             f"‚ùóÔ∏è'{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")
        else:
            bot.send_message(
                message.chat.id,
                f"{pretty_view(goods.pop(index))}\n"
                "‚ùé –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")
    save(goods)


@bot.message_handler(commands=["price"])
def change_price(message):
    change_key("–¶—ñ–Ω–∞", message, set_price)


@bot.message_handler(commands=["stock"])
def change_stock(message):
    change_key("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", message, set_stock)


@bot.message_handler(commands=["desc"])
def change_desc(message):
    change_key("–û–ø–∏—Å", message)


@bot.message_handler(commands=["report"])
def view_report(message):
    global goods
    bot.send_chat_action(message.chat.id, 'typing')
    total_stock = sum([g["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] for g in goods])
    total_value = sum([g["–¶—ñ–Ω–∞"] * g["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] for g in goods])
    sorted_goods = sorted([(g["–ù–∞–∑–≤–∞"], g["–¶—ñ–Ω–∞"]) for g in goods],
                          key=lambda item: item[1])
    bot.send_message(
        message.chat.id,
        "üìã –í—Å—å–æ–≥–æ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω—å —Ç–æ–≤–∞—Ä—ñ–≤:\n"
        f"{len(goods)} –æ–¥.\n\n"
        "üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ñ:\n"
        f"{total_stock} —à—Ç.\n\n"
        "üõí –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Å–∫–ª–∞–¥—É:\n"
        f"{total_value} –≥—Ä–Ω.\n\n"
        "‚¨ÜÔ∏è –ù–∞–π–¥–æ—Ä–æ–∂—á–∏–π —Ç–æ–≤–∞—Ä:\n"
        f"'{sorted_goods[-1][0]}' –∑–∞ —Ü—ñ–Ω–æ—é {sorted_goods[-1][1]} –≥—Ä–Ω.\n\n"
        "‚¨áÔ∏è –ù–∞–π–¥–µ—à–µ–≤—à–∏–π —Ç–æ–≤–∞—Ä:\n'"
        f"{sorted_goods[0][0]}' –∑–∞ —Ü—ñ–Ω–æ—é {sorted_goods[0][1]} –≥—Ä–Ω.")


@bot.message_handler(commands=["oos"])
def out_of_stock(message):
    global goods
    oos_list = [g for g in goods if not g["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"]]
    if oos_list:
        bot.send_message(
            message.chat.id,
            f"{pretty_view(oos_list)}\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –Ω–∞ —Å–∫–ª–∞–¥—ñ —Ç–æ–≤–∞—Ä—ñ–≤")
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—Å—ñ —Ç–æ–≤–∞—Ä–∏ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ")


@bot.message_handler(func=lambda message: message.text.lower() in HELLO_WORDS)
def send_hello(message):
    bot.reply_to(message, f"{hello()}, {message.from_user.first_name}!")


@bot.message_handler(content_types=['text'])
def check_buttons(message):
    global BUTTONS
    if message.text == BUTTONS[0]:
        print_goods(message)
    elif message.text == BUTTONS[1]:
        view_report(message)
    elif message.text == BUTTONS[2]:
        send_help(message)
    elif message.text == BUTTONS[3]:
        out_of_stock(message)
    else:
        bot.send_message(message.chat.id, message.text)


def listener(messages):
    for m in messages:
        if m.content_type == 'text':
            print(f"{m.from_user.first_name} [{m.chat.id=}]: {m.text}")


def keyboard():
    global BUTTONS
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*(KeyboardButton(b) for b in BUTTONS))
    return markup


def hello():
    now = datetime.now()
    if 6 <= now.hour < 12:
        return "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
    elif 12 <= now.hour < 18:
        return "–î–æ–±—Ä–∏–π –¥–µ–Ω—å"
    elif 18 <= now.hour < 23:
        return "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
    else:
        return "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ"


def load():
    global GOODS_FILE_NAME
    try:
        with open(GOODS_FILE_NAME, "r", encoding="utf8") as g:
            loaded_goods = json.load(g)
    except FileNotFoundError:
        print(f"{GOODS_FILE_NAME} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        loaded_goods = []
    print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n"
          f"{pretty_view(loaded_goods)}")
    return loaded_goods


def save(json_obj):
    global GOODS_FILE_NAME
    try:
        with open(GOODS_FILE_NAME, "w", encoding="utf8") as f:
            json.dump(json_obj, f, indent=2, ensure_ascii=False)
        print("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    except IOError as err:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É {GOODS_FILE_NAME} {err}")


def pretty_view(json_obj):
    return json.dumps(json_obj, indent=2, ensure_ascii=False)


def parse_command_args(text):
    args = skip_command_and_split(text, ",")
    if args[0][0] == "/":
        args.pop(0)
    for i in range(len(args)):
        args[i] = delete_spaces(args[i])
    return args


def skip_command_and_split(text, split_symbol):
    return text.strip()[text.find(" ") + 1:].split(split_symbol)


def delete_spaces(text):
    return " ".join(text.split())


def find_goods(name):
    global goods, PRIMARY_KEY
    for i in range(len(goods)):
        if goods[i][PRIMARY_KEY] == name:
            return i
    return -1


def set_price(text_price):
    try:
        return round(float(text_price), 2)
    except ValueError:
        return -1


def set_stock(text_stock):
    try:
        return int(text_stock)
    except ValueError:
        return -1


def change_key(key, message, func=None):
    global goods
    args = parse_command_args(message.text)
    if len(args) != 2:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏")
        return
    index = find_goods(args[0])
    if index == -1:
        bot.send_message(
            message.chat.id,
            f"‚ùóÔ∏è'{args[0]}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤")
        return
    if func:
        value = func(args[1])
        if isinstance(value, int) and value < 0:
            bot.send_message(message.chat.id,
                             f"‚ùå –î—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
            return
        goods[index][key] = value
    else:
        goods[index][key] = args[1]
    bot.send_message(message.chat.id,
                     f"{pretty_view(goods[index])}\n‚úÖ {key} —Ç–æ–≤–∞—Ä—É –∑–º—ñ–Ω–µ–Ω–æ")
    save(goods)


if __name__ == "__main__":
    bot.delete_my_commands()
    bot.set_my_commands([BotCommand(k, v) for k, v in MENU.items()])
    bot.set_update_listener(listener)
    goods = load()
    print("–ë–æ—Ç —Å–ª—É—Ö–∞—î –∑–∞–ø–∏—Ç–∏...")
    bot.infinity_polling()
